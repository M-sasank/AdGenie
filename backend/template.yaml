AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  The backend for the AdGenie project. This stack includes
  the database, APIs, and business logic for generating and posting social media ads.

Parameters:
  InstagramClientIdParameter:
    Type: String
    Description: Instagram App Client ID for OAuth
    NoEcho: false
  InstagramClientSecretParameter:
    Type: String
    Description: Instagram App Client Secret for OAuth
    NoEcho: true

Globals:
  Api:
    Cors:
      AllowMethods: "'POST,GET,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
      AllowOrigin: "'*'"
      MaxAge: "'600'"
  Function:
    Timeout: 30
    Runtime: python3.11
    MemorySize: 256
    Environment:
      Variables:
        REGION: !Ref AWS::Region

# Rest of your template remains the same


Resources:
  # DynamoDB Table
  BusinessesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Businesses
      PrimaryKey:
        Name: businessID
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        auto-delete: no

  # SQS Queue
  AdContentQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: auto-delete
          Value: no

  # Lambda Functions (they inherit tags from Globals, but you can also specify explicitly)
  AdGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ad_generation/
      Handler: app.lambda_handler
      Description: Generate ad content using Amazon Bedrock
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: "*"
        - SQSSendMessagePolicy:
            QueueName: !GetAtt AdContentQueue.QueueName
      Events:
        ManualTestApi:
          Type: Api
          Properties:
            Path: /manual-test-post
            Method: post
      Environment:
        Variables:
          AD_CONTENT_QUEUE_URL: !Ref AdContentQueue
      Tags:
        auto-delete: no

  PostToInstagramFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/post_to_instagram/
      Handler: app.lambda_handler
      Description: Post generated content to Instagram
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AdContentQueue.Arn
            BatchSize: 1
      Tags:
        auto-delete: no

  CreateBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business_create/
      Handler: app.lambda_handler
      Description: Create a new business
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /businesses
            Method: post
      Tags:
        auto-delete: no

  ReadBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business_read/
      Handler: app.lambda_handler
      Description: Get a business by ID
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /businesses/{businessID}
            Method: get
      Tags:
        auto-delete: no

  ListBusinessesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business_list/
      Handler: app.lambda_handler
      Description: List all businesses
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /businesses
            Method: get
      Tags:
        auto-delete: no

  UpdateBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business_update/
      Handler: app.lambda_handler
      Description: Update a business by ID
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /businesses/{businessID}
            Method: put
      Tags:
        auto-delete: no

  DeleteBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business_delete/
      Handler: app.lambda_handler
      Description: Delete a business by ID
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /businesses/{businessID}
            Method: delete
      Tags:
        auto-delete: no

  OAuthInstagramExchangeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/oauth_instagram_exchange/
      Handler: app.lambda_handler
      Description: Exchange Instagram OAuth authorization code for access token
      Environment:
        Variables:
          INSTAGRAM_CLIENT_ID: !Ref InstagramClientIdParameter
          INSTAGRAM_CLIENT_SECRET: !Ref InstagramClientSecretParameter
          INSTAGRAM_TOKEN_URL: https://api.instagram.com/oauth/access_token
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /oauth/instagram/exchange
            Method: post
      Tags:
        auto-delete: no

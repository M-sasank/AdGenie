AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  The backend for the AdGenie project. This stack includes
  the database, APIs, and business logic for generating and posting social media ads.

Globals:
  Function:
    Timeout: 10
    # Using Python 3.11 as requested (latest patch version available)
    Runtime: python3.11
    MemorySize: 128
    Environment:
      Variables:
        PYTHONPATH: /var/runtime

Resources:
  # DynamoDB Table
  BusinessesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Businesses
      PrimaryKey:
        Name: businessID
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # NEW: Define the SQS queue that will connect our functions
  AdContentQueue:
    Type: AWS::SQS::Queue

  # --- Ad Generation and Posting Functions ---

  AdGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ad_generation/
      Handler: app.lambda_handler
      Description: Generate ad content using Amazon Bedrock
      # CHANGE: The policy is now for SQS, not Lambda Invoke
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: "*"
        - SQSSendMessagePolicy:
            QueueName: !GetAtt AdContentQueue.QueueName
      Events:
        ManualTestApi:
          Type: Api
          Properties:
            Path: /manual-test-post
            Method: post
      # CHANGE: The environment variable now holds the SQS Queue URL
      Environment:
        Variables:
          AD_CONTENT_QUEUE_URL: !Ref AdContentQueue

  PostToInstagramFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/post_to_instagram/
      Handler: app.lambda_handler
      Description: Post generated content to Instagram
      # CHANGE: This function is now triggered by SQS, not called directly.
      # SAM will automatically grant this function the necessary permissions
      # to read and delete messages from the queue.
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AdContentQueue.Arn
            BatchSize: 1 # Process one ad at a time

  # --- CRUD Functions for Businesses ---

  CreateBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business_create/
      Handler: app.lambda_handler
      Description: Create a new business
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /businesses
            Method: post

  ReadBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business_read/
      Handler: app.lambda_handler
      Description: Get a business by ID
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /businesses/{businessID}
            Method: get

  ListBusinessesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business_list/
      Handler: app.lambda_handler
      Description: List all businesses
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /businesses
            Method: get

  UpdateBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business_update/
      Handler: app.lambda_handler
      Description: Update a business by ID
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /businesses/{businessID}
            Method: put

  DeleteBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business_delete/
      Handler: app.lambda_handler
      Description: Delete a business by ID
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /businesses/{businessID}
            Method: delete

  AdGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ad_generation/
      Handler: app.lambda_handler
      Description: Generate ad content using Amazon Bedrock
      # Add a new policy to allow this function to call Bedrock
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: "*"
      Events:
        ManualTestApi:
          Type: Api
          Properties:
            Path: /manual-test-post
            Method: post

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayEndpoint"

  BusinessesTableName:
    Description: "DynamoDB table name for businesses"
    Value: !Ref BusinessesTable
    Export:
      Name: !Sub "${AWS::StackName}-BusinessesTableName"

  AdContentQueueUrl:
    Description: "SQS Queue URL for ad content processing"
    Value: !Ref AdContentQueue
    Export:
      Name: !Sub "${AWS::StackName}-AdContentQueueUrl"